{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","currentQuote","quote","author","handleClick","bind","assertThisInitialized","_this2","fetch","then","results","json","data","setState","randomNum","Math","floor","random","randomQuote","randomSelection","react_default","a","createElement","className","src","alt","Card_default","id","CardActionArea_default","CardContent_default","Typography_default","component","variant","CardActions_default","Button_default","size","color","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAuEeA,cA3Db,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAM,CACPC,OAAO,GACPC,aAAa,CACXC,MAAM,YACNC,OAAO,YAGbX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KATRA,mFAWM,IAAAe,EAAAZ,KACjBa,MAAM,uEACLC,KAAK,SAAAC,GACF,OAAOA,EAAQC,SAChBF,KAAK,SAAAG,GACJ,OAAOL,EAAKM,SAAS,CAACb,OAAOY,EAAKZ,WACnCS,KAAK,WACN,IAAIK,EAAYC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC5BC,EAAcX,EAAKR,MAAMC,OAAOc,GACpC,OAAOP,EAAKM,SAAS,CAACZ,aAAaiB,4CAIrC,IAAIC,EAAkBJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACtCtB,KAAKkB,SAAS,SAACd,GAAD,MAAY,CACxBE,aAAcF,EAAMC,OAAOmB,uCAI7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,0FAA2FD,UAAU,WAAWE,IAAI,SAC9HL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAMM,GAAG,aACPP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACID,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAYU,UAAU,KAAKJ,GAAG,QAA9B,IACIhC,KAAKI,MAAME,aAAaC,MAAQP,KAAKI,MAAME,aAAaC,MAAQ,cADpE,KAGAkB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAYW,QAAQ,KAAKD,UAAU,KAAKJ,GAAG,UAA3C,KACKhC,KAAKI,MAAME,aAAaE,OAASR,KAAKI,MAAME,aAAaE,OAAS,iBAK3EiB,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,KACED,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQc,KAAK,QAAQC,MAAM,UAAUT,GAAG,YAAYU,QAAS1C,KAAKS,aAAlE,aAGAgB,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQc,KAAK,QAAQC,MAAM,UAAWE,KAAK,2BAA2BX,GAAG,eAAzE,mBAlDEY,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.b63be6c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n        quotes:[],\n        currentQuote:{\n          quote:'something',\n          author:'homer j'\n        }\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  componentDidMount(){\n    fetch('https://aitorp6.herokuapp.com/quotes/api/quote/Homer%20J.%20Simpson')\n    .then(results => {\n        return results.json();\n    }).then(data => {\n        return this.setState({quotes:data.quotes})\n    }).then(() => {\n      let randomNum = Math.floor(Math.random() * 211)\n      let randomQuote = this.state.quotes[randomNum]\n      return this.setState({currentQuote:randomQuote})\n    })\n  }\n  handleClick () {\n    let randomSelection = Math.floor(Math.random() * 211);\n    this.setState((state) => ({\n      currentQuote: state.quotes[randomSelection]\n    }))\n  }\n  render() {\n    return (\n      <div className=\"App\">\n          <img src={'https://s-media-cache-ak0.pinimg.com/236x/33/58/18/335818b563208954ab8fc8896d2d3a18.jpg'} className=\"App-logo\" alt=\"logo\" />\n          <Card id=\"quote-box\">\n            <CardActionArea>\n                <CardContent>\n                  <Typography component=\"h1\" id=\"text\">\n                    \"{this.state.currentQuote.quote ? this.state.currentQuote.quote : 'placeholder'}\"\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h2\" id=\"author\">\n                    - {this.state.currentQuote.author ? this.state.currentQuote.author : 'some author'}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n              <CardActions>\n                <Button size=\"small\" color=\"primary\" id=\"new-quote\" onClick={this.handleClick}>\n                  New Quote\n                </Button>\n                <Button size=\"small\" color=\"primary\"  href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">\n                  Tweet\n                </Button>\n              </CardActions>\n            </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}